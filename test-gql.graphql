type Foo {
   a: B
}

type Bla @foo(a: 11) @bar @foo(a: "dd") {
 a(a: B = 111, v: T y: VV): B @foo
 d(a: B = 111, v: T y: VV): B @baz(a: 111) @foo @bar(a: "111")
 b(a: B = 111 v: T y: VV): B
 c(a: CC = 111 @foo @baz y: ZZ @foo @bar(a: "111") @bb c: DD): B
}

type Foo {
 a: B @bar @baz(a: 11)
}

interface Animal {
  a(a: B = 111, v: T y: VV): B @foo
  d(a: B = 111, v: T y: VV): B @baz(a: 111) @foo @bar(a: "111")
  b(a: B = 111 v: T y: VV): B
  c(a: CC = 111 @foo @baz y: ZZ @foo @bar(a: "111") @bb c: DD): B
}

interface Pet {
  favFood: Food
}

type Deer implements Animal & Pet {
  a: B
}

enum Direction @foo @bar(a: 11) {
 NORTH @print(value: "north"),
 SOUTH @print(value: "south")
 EAST
 WEST @print (value: "west") @expensive
}

type Foo

interface Bar

enum Baz

union Foobar

directive @example on FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @example on FIELD_DEFINITION ARGUMENT_DEFINITION FOO

scalar DateTime

scalar Time @foo @baz(a: "111") @bar(a: 11 c: "dd")

input Point2D {
  x: Float
  y: Float
}
