type Foo {
   a: B
}

type Bla @foo(a: 11) @bar @foo(a: "dd") {
 a(a: B = 111, v: T y: VV): B @foo
 d(a: B = 111, v: T y: VV): B @baz(a: 111) @foo @bar(a: "111")
 b(a: B = 111 v: T y: VV): B
 c(a: CC = 111 @foo @baz y: ZZ @foo @bar(a: "111") @bb c: DD): B
}

type Foo {
 a: B @bar @baz(a: 11)
}

interface Animal {
  a(a: B = 111, v: T y: VV): B @foo
  d(a: B = 111, v: T y: VV): B @baz(a: 111) @foo @bar(a: "111")
  b(a: B = 111 v: T y: VV): B
  c(a: CC = 111 @foo @baz y: ZZ @foo @bar(a: "111") @bb c: DD): B
}

interface Pet {
  favFood: Food
}

type Deer implements Animal & Pet {
  a: B
}

enum Direction @foo @bar(a: 11) {
 NORTH @print(value: "north"),
 SOUTH @print(value: "south")
 EAST
 WEST @print (value: "west") @expensive
}

type Foo

interface Bar

enum Baz

union Foobar

directive @example on FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @example on FIELD_DEFINITION ARGUMENT_DEFINITION FOO

scalar DateTime

scalar Time @foo @baz(a: "111") @bar(a: 11 c: "dd")

input Point2D {
  x: Float
  y: Float
}

input Point2D {
 x: Float = 10,
 y: Float = "dd" @foo @baz(a: 10)
}

input Empty

extend type Story {
  isHiddenLocally(a: V = 10): Boolean
}

extend type Story {
  isHiddenLocally(a: V = 10): Boolean
  a(a: B = 111, v: T y: VV): B @foo
  d(a: B = 111, v: T y: VV): B @baz(a: 111) @foo @bar(a: "111")
  b(a: B = 111 v: T y: VV): B
}

extend scalar Foo @bar @baz(a: "foobar")

extend schema {
 f: TT
}

extend schema @foo

extend type Foo implements Bar & Baz Baz


extend interface Foo {
 baz: Bar
}

extend interface Bar @foo

extend union Foo @baz

extend union Foo = Baz

extend union Foo @foobar @foo(a: 10) = Cool

extend type Foo implements Bar & Baz Baz

extend type Foo {
 f: T
}

extend type Foo @baz

extend type Foo implements Baz Foo @baz @foo

extend type Foo implements Baz Foo @baz @foo {
 t: CC @foo
}

extend interface Fooo @baz

extend union Foo @foobar @foo(a: 10) = Cool YYY | VVV

extend enum Vehicle @foo

extend enum Vehicle {
 CAR
 BAZ @foo
}

extend enum Vehicle @foo @bar(a: 10) {
 FOO
 BAR
}

input ExampleInputObject {
  a: String
  b: Int!
}

extend input Foo @baz

extend input Foo {
 a: T = 10 @foo @baz(a: 10)
 b: C!
}

extend input Foo @baz @foobar(a: "111") {
 a: T = 10 @foo @baz(a: 10)
 b: C!
}

query foo ($a: B = 111 @foo @bar(a: "111" b: true) $b: B = 555 @foo) @bla {
 a(b: $vv, g: "ddd" r: $bb c: [111 $bla])
 b: B(a: 11 t: "cool" h: $var1)
 c
}

{
 a(b: $vv, g: "ddd" r: $bb c: [111 $bla])
 b: B(a: 11 t: "cool" h: $var1)
 c
}

{
 a(b: $vv, g: "ddd" r: $bb c: [111 $bla]) @bar @foobar(a: "100")
 b: B(a: 11 t: "cool" h: $var1)
 c @foo(a: 100 b: $bla) d: foo @foo(b: true)
}

{
 a(b: $vv, g: "ddd" r: $bb c: [111 $bla]) @bar @foobar(a: "100")
 b: B(a: 11 t: "cool" h: $var1)
 c @foo(a: 100 b: $bla) d: foo @foo(b: true)
 ... Cool @foo
}

{
 a(b: $vv, g: "ddd" r: $bb c: [111 $bla]) @bar @foobar(a: "100")
 b: B(a: 11 t: "cool" h: $var1)
 c @foo(a: 100 b: $bla)
 d: foo @foo(b: true c: null) {
  a
  b {
     a
     b
  }
 }
}

query foo ($a: B = 111 @foo @bar(a: "111" b: true) $b: B = 555 @foo) @bla {
 a: b @foo
 ... on Foo @foo @bar(a: true) {
    a
 }
 ... @include {
   b
 }
}