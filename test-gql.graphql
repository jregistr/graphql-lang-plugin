interface Thing {
    name: String
}

interface Vehicle {
    color: Color
}

type Car implements Vehicle, Thing @foo @bar(aaa: "dddd") {
    gas: Int
}

enum Booleans {
    TRUE
    FALSE
}

enum ExampleTwo {
    FIRST,
    SECOND
}

type Rocket implements Vehicle {
    bla: Bla @bar(aaa: 777)
    blast(radius: Int): Boolean
    explode(area: Int, double: Boolean): Boolean @bar(aaa: "vvv")
}

type Rocket implements Vehicle {
    blast(radius: Int): Boolean
    explode(area: Int, double: Boolean): Boolean @bar(aaa: 11111111.01)
}

{
  employee(id: "") {
    firstName
  }
}


query foo {
  allCompanies {
    name
  }
}

query bla @fooobar {
  cool(iden: {tok: "BOOM"}) {
    soofoo @bazbar {
      ccc
    }
  }
}

{
  employee(id: "") {
    ... on Employee {
      firstName
    }
  }
}


{
  employee(id: "") {
    ... onEmploy
  }
}

fragment onEmploy on Employee {
  firstName
}

query DD {
  employee {
    ... on Employee {
      bla:firstName @skip(if: true)
      subordinates {
        firstName
        ... on YY {
         g
        }
      }
    }
  }
}

query bla {
  employee(a: {a: "gg"}) {
    firstName
  }
}

query bla @fooobar {
  cool(iden: {tok: "BOOM"}) {
    soofoo @bazbar {
      ccc
    }
    ... on Bla {
     g
    }
  }
}

{
 ... on Query {
  a
 }
}

query name {
	dss:employee(a: 11, tt: {d: 77}) @foo @bar(a: "11", b: true) {
    address
    foo: address @foo @baz(hh: false)
    subordinates {
      lastName
      ... superb @baz @tttt(a: 777)
      ... on Bla @baz {
        g: y
        ... on Foo {
         t {
          y: tt
         }
        }
      }
    }
  }
}

fragment bla on Foo @foo {
 ... on Foo {
  a
 }
 t: ff
 ...onCool
}